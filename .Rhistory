xlims <- plot1_build$layout$panel_scales_x[[1]]$range
range_values <- xlims$range
print(range_values)
# min <- xlims[[1]]
# max <- xlims[[2]]
# check if xlim is null
if (is.null(xlims)) {
stop("failed to extract x-axis limits from plot1.")
}
# print('min',min,'max',max)
# Apply x-axis limits to plot2
timeline_plot_spec <- plot2 +
scale_x_date(
limits = xlims,
breaks = mo_breaks,
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
grid <- plot_grid(plot1, timeline_plot_spec, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1)) +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
return(grid)
}
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
plot(glucoseLevelsLong)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
glucoseLevels_pg <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months')
plot(glucoseLevels_pg)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
glucoseLevels_pg <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months')
plot(glucoseLevels_pg)
glucoseLevels_pg <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months')
plot(glucoseLevels_pg)
rc_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months')
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months')
plot(rc_plot_grid)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months')
plot(gl_plot_grid)
library(cowplot)
library(dplyr)
library(ggplot2)
library(lubridate)
library(dplyr)
library(mgcv)
library(gridExtra)
library(patchwork)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months')
plot(gl_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
library(cowplot)
library(dplyr)
library(ggplot2)
library(lubridate)
library(dplyr)
library(mgcv)
library(gridExtra)
library(patchwork)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
c
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months')
plot(rc_plot_grid)
timeline_plot_res <- timeline_plot +
scale_x_date(
limits = c(as.Date("2022-08-14"), as.Date("2024-04-30")),
breaks = "3 months",
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
timeline_plot_gluC <- timeline_plot +
scale_x_date(
limits = c(as.Date("2020-10-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
resectionCavity_plot_grid <- plot_grid(resectionCavity, timeline_plot_res, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1))
resectionCavity_plot_grid <- resectionCavity_plot_grid +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
glucoseLevelsLong2 <- plot_grid(glucoseLevelsLong, timeline_plot_gluC, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1))
glucoseLevelsLong2 <- glucoseLevelsLong2 +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
View(resectionCavity_plot_grid)
plot(resectionCavity_plot_grid)
plot(glucoseLevelsLong2)
create_plot_grid <- function(plot1, plot2, mo_breaks, xlims) {
if (!inherits(plot1, "gg")) {
stop("plot1 is not a valid ggplot object.")
}
# check if plot1 has been built successfully
plot1_build <- ggplot_build(plot1)
if (is.null(plot1_build)) {
stop("failed to build plot1.")
}
# Apply x-axis limits to plot2
timeline_plot_spec <- plot2 +
scale_x_date(
limits = xlims,
breaks = mo_breaks,
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
grid <- plot_grid(plot1, timeline_plot_spec, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1)) +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
return(grid)
}
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '3 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(gl_plot_grid)
plots <- list(resectionCavity = resectionCavity,
resectionCavityLog = resectionCavityLog,
glucoseLevelsLong = glucoseLevelsLong,
glucoseLevelsShort = glucoseLevelsShort,
glucoseLevelsXShort = glucoseLevelsXShort,
a1cLevelsShort = a1cLevelsShort,
a1cLevelsLong = a1cLevelsLong
)
intervals <- list(resectionCavity = '3 months',
resectionCavityLog = '6 months',
glucoseLevelsLong = '6 months',
glucoseLevelsShort = '6 months',
glucoseLevelsXShort = '6 months',
a1cLevelsShort = '6 months',
a1cLevelsLong = '6 months'
)
ranges <- list(resectionCavity = c(as.Date("2022-08-14"), as.Date("2024-04-30")),
resectionCavityLog = resectionCavityLog,
glucoseLevelsLong = c(as.Date("2020-10-01"), as.Date("2024-04-30")),
glucoseLevelsShort = glucoseLevelsShort,
glucoseLevelsXShort = glucoseLevelsXShort,
a1cLevelsShort = a1cLevelsShort,
a1cLevelsLong = a1cLevelsLong
)
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
plots <- list(resectionCavity = resectionCavity,
resectionCavityLog = resectionCavityLog,
glucoseLevelsLong = glucoseLevelsLong,
glucoseLevelsShort = glucoseLevelsShort,
glucoseLevelsXShort = glucoseLevelsXShort,
a1cLevelsShort = a1cLevelsShort,
a1cLevelsLong = a1cLevelsLong
)
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
create_plot_grid <- function(plot1, plot2, mo_breaks, xlims) {
if (!inherits(plot1, "gg")) {
stop("plot1 is not a valid ggplot object.")
}
# check if plot1 has been built successfully
plot1_build <- ggplot_build(plot1)
if (is.null(plot1_build)) {
stop("failed to build plot1.")
}
# Apply x-axis limits to plot2
timeline_plot_spec <- plot2 +
scale_x_date(
limits = xlims,
breaks = mo_breaks,
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
grid <- plot_grid(plot1, timeline_plot_spec, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1)) +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
return(grid)
}
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(gl_plot_grid)
?grepl
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
if (name == 'resectionCavityLog') {
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
}
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
if (name == 'resectionCavityLog') {
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
print('Successfully did plot',name)
}
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
if (name == 'resectionCavityLog') {
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
print('Successfully did plot',name)
}
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
if (name == 'resectionCavityLog') {
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
print('Successfully did plot')
}
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
if (name != 'resectionCavityLog') {
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
grid <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(grid, plot = plot_grid, width = 10, height = 6, units = "in")
}
print('Successfully did plot')
}
c
c
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(gl_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
timeline_plot_res <- timeline_plot +
scale_x_date(
limits = c(as.Date("2022-08-14"), as.Date("2024-04-30")),
breaks = "3 months",
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2023-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
glucoseLevelsShort <- ggplot(data = df2, aes(x = Date, y = ReadingGlucose)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "Glucose Level(mg/dL)") +
ggtitle("Glucose Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2022-09-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
}
for (name in names(plots)) {
plot = plots[[name]]
range = ranges[[name]]
interval = intervals[[name]]
filename <- file.path(plot_dir, paste0(name, ".png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
plot_grid <- create_plot_grid(plot, timeline_plot, interval, range)
}
glucoseLevelsXShort <- ggplot(data = df2, aes(x = Date, y = ReadingGlucose)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "Glucose Level(mg/dL)") +
ggtitle("Glucose Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2023-10-30"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2023-10-01"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2023-10-30"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-28")))
plot(a1cs_plot_grid)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(a1cs_plot_grid)
a1cLevelsShort <- ggplot(data = df3, aes(x = Date, y = A1C)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "A1C Levels (%)") +
ggtitle("A1C Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2022-09-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(a1cs_plot_grid)
acs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(accs_plot_grid)
acs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(acs_plot_grid)
c
c
c
c
acs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(acs_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
acs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(acs_plot_grid)
apg <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(apg)
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2023-10-30"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
Q
create_plot_grid <- function(plot1, plot2, mo_breaks, xlims) {
if (!inherits(plot1, "gg")) {
stop("plot1 is not a valid ggplot object.")
}
# check if plot1 has been built successfully
plot1_build <- ggplot_build(plot1)
if (is.null(plot1_build)) {
stop("failed to build plot1.")
}
# Apply x-axis limits to plot2
timeline_plot_spec <- plot2 +
scale_x_date(
limits = xlims,
breaks = mo_breaks,
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
grid <- plot_grid(plot1, timeline_plot_spec, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1)) +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
return(grid)
}
a1cLevelsShort <- ggplot(data = df3, aes(x = Date, y = A1C)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "A1C Levels (%)") +
ggtitle("A1C Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2022-09-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
apg <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-02-30")))
plot(apg)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
plot(rc_plot_grid)
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(gl_plot_grid)
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(gls_plot_grid)
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2023-10-30"), as.Date("2024-04-30")))
plot(glxs_plot_grid)
timeline_plot_gluC <- timeline_plot +
scale_x_date(
limits = c(as.Date("2020-10-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
apg <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2023-10-30"), as.Date("2024-04-30")))
plot(apg)
apg <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(apg)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cLevelsLong <- ggplot(data = df3, aes(x = Date, y = A1C)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "A1C Levels (%)") +
ggtitle("A1C Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2020-10-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
create_plot_grid <- function(plot1, plot2, mo_breaks, xlims) {
if (!inherits(plot1, "gg")) {
stop("plot1 is not a valid ggplot object.")
}
# check if plot1 has been built successfully
plot1_build <- ggplot_build(plot1)
if (is.null(plot1_build)) {
stop("failed to build plot1.")
}
# Apply x-axis limits to plot2
timeline_plot_spec <- plot2 +
scale_x_date(
limits = xlims,
breaks = mo_breaks,
date_labels = "%b %Y") +
theme(axis.ticks.x = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"))
grid <- plot_grid(plot1, timeline_plot_spec, ncol = 1, align = "v", axis = "l", rel_heights = c(2, 1)) +
plot_layout(heights = c(2, 1), nrow = 1, ncol = 1)
return(grid)
}
a1cLevelsLong <- ggplot(data = df3, aes(x = Date, y = A1C)) +
geom_point() +
geom_line() +
labs(x = "Date", y = "A1C Levels (%)") +
ggtitle("A1C Levels over Time") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_x_date(limits = c(as.Date("2020-10-01"), as.Date("2024-04-30")),
breaks = "6 months",
date_labels = "%b %Y")
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(a1cs_plot_grid)
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot(a1cl_plot_grid)
rc_plot_grid <- create_plot_grid(resectionCavity, timeline_plot, '3 months',  c(as.Date("2022-08-14"), as.Date("2024-04-30")))
gl_plot_grid <- create_plot_grid(glucoseLevelsLong, timeline_plot, '6 months', c(as.Date("2020-10-01"), as.Date("2024-04-30")))
gls_plot_grid <- create_plot_grid(glucoseLevelsShort, timeline_plot, '6 months', c(as.Date("2022-09-01"), as.Date("2024-04-30")))
glxs_plot_grid <- create_plot_grid(glucoseLevelsXShort, timeline_plot, '6 months', c(as.Date("2023-10-30"), as.Date("2024-04-30")))
a1cs_plot_grid <- create_plot_grid(a1cLevelsShort, timeline_plot, '6 months',  c(as.Date("2022-09-01"), as.Date("2024-04-30")))
a1cl_plot_grid <- create_plot_grid(a1cLevelsLong, timeline_plot, '6 months',  c(as.Date("2020-10-01"), as.Date("2024-04-30")))
plot_grids <- list(resectionCavity = rc_plot_grid,
glucoseLevelsLong = gl_plot_grid,
glucoseLevelsShort = gls_plot_grid,
glucoseLevelsXShort = glxs_plot_grid,
a1cLevelsShort = a1cs_plot_grid,
a1cLevelsLong = a1cl_plot_grid
)
for (name in names(plot_grids)) {
plot = plot_grids[[name]]
filename <- file.path(plot_dir, paste0(name, "_grid.png"))
ggsave(filename, plot = plot, width = 10, height = 6, units = "in")
}
