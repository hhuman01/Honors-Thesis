knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
install.packages("cowplot")
library(cowplot)
library(tidyverse)
Data <- read.csv("tutorialData0323.csv")
install.packages("tidyverse")
install.packages("cowplot")
library(cowplot)
library(tidyverse)
Data <- read.csv("tutorialData0323.csv")
install.packages("cowplot")
install.packages("tidyverse")
View(midwest)
library(tidyverse)
View(midwest)
library(tidyverse)
ggplot(midwest, aes(x=area, y=poptotal))
geom_point(scatter.smooth())
geom_point()
ggplot(midwest, aes(x=area, y=poptotal))
geom_point()
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
ggplot(midwest, aes(x=area, y=log10(poptotal))+
geom_point()+
geom_smooth(method=lm)
ggplot(midwest, aes(x=area, y=log10(poptotal)))+
ggplot(midwest, aes(x=area, y=log10(poptotal)))+
geom_point()+
geom_smooth(method=lm)
ggplot(midwest, aes(x=area, y=poptotal)+
geom_point()+
geom_smooth(method=lm)
ggplot(midwest, aes(x=area, y=poptotal))+
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
xlim(c(0, 0.1))+
ylim(c(0,1000000))
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
xlim(c(0, 0.1))+
ylim(c(0,1000000))
ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g
+
coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g
+
coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g+coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g2<-g+coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g<- ggplot(midwest, aes(x=area, y=poptotal))+
geom_point()+
geom_smooth(method=lm)
g2<-g+coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset")
View(g2)
View(g2)
g2<-g+coord_cartesian(xlim=c(0,0.1),ylim=c(0,1000000))
g3<-g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset",
y="Population", x="Area",
caption="Midwest Demographics")
g3
g4<-g3+geom_plot(col="steelblue",size=3) +
geom_smooth(method+"lm", col="firebrick", size=5)
g3<-g2 + labs(title="Area Vs Population",
subtitle = "From Midwest dataset",
y="Population", x="Area",
caption="Midwest Demographics")
g3
g4<-g3+geom_plot(col="steelblue",size=3) +
geom_smooth(method+"lm", col="firebrick", size=5)
g4<-g3+geom_point(col="steelblue",size=3) +
geom_smooth(method+"lm", col="firebrick", size=5)
g4<-g3+geom_point(col="steelblue",size=3) +
geom_smooth(method="lm", col="firebrick", size=5)
g4
g5<- g4+ geom_point(aes=(col=state), size+3)
g5<- g4+ geom_point(aes(col=state), size+3)
g5<- g4+ geom_point(aes(col=state), size=3)
g5
install.packages("cowplot")
library(cowplot)
g6 <- g5+ theme_cowplot(12)
g6
g5
g6
setwd("~/")
###function for the sigmoid phylo
sigmoidPhylogram<-function(tree,...){
## b=5,m1=0.01,m2=0.5,v=1
b<-if(hasArg(b)) list(...)$b else 5
m1<-if(hasArg(m1)) list(...)$m1 else 0.01
m2<-if(hasArg(m2)) list(...)$m2 else 0.5
v<-if(hasArg(v)) list(...)$v else 1
if(inherits(tree,"simmap")){
if(hasArg(colors)) colors<-list(...)$colors
else {
ss<-sort(unique(c(getStates(tree,"nodes"),
getStates(tree,"tips"))))
mm<-length(ss)
colors<-setNames(
colorRampPalette(palette()[1:min(8,mm)])(mm),
ss)
}
} else if(inherits(tree,"phylo")) {
if(hasArg(color)) colors<-setNames(list(...)$color,"1")
else colors<-setNames(par()$fg,"1")
tree<-paintSubTree(tree,Ntip(tree)+1,"1")
}
if(hasArg(res)) res<-list(...)$res
else res<-199
if(hasArg(use.edge.length))
use.edge.length<-list(...)$use.edge.length
else use.edge.length<-TRUE
if(!use.edge.length){
if(hasArg(power)) power<-list(...)$power
else power<-1
tree<-compute.brlen.simmap(tree,power=power)
}
if(hasArg(lwd)) lwd<-list(...)$lwd
else lwd<-2
h<-max(nodeHeights(tree))
args<-list(...)
args$power<-NULL
args$res<-NULL
args$colors<-NULL
args$b<-NULL
args$m1<-NULL
args$m2<-NULL
args$v<-NULL
args$tree<-tree
args$color<-"transparent"
dev.hold()
do.call(plotTree,args)
pp<-get("last_plot.phylo",envir=.PlotPhyloEnv)
## Yt<-A+(K-A)/((C+exp(-B*(t-M)))^(1/v))
sigmoid<-function(x,.A=A,.K=K,.C=C,.B=B,.M=M,.v=v)
return(.A+(.K-.A)/((.C+exp(-.B*(x-.M)))^(1/.v)))
for(i in 1:nrow(tree$edge)){
A<-pp$yy[tree$edge[i,1]]
K<-pp$yy[tree$edge[i,2]]
if(i==1) dy<-abs(A-K)
B<-b*Ntip(tree)/h
t<-seq(pp$xx[tree$edge[i,1]],pp$xx[tree$edge[i,2]],
length.out=res)
t<-sort(c(t,t[1]+cumsum(tree$maps[[i]])))
dd<-diff(range(t))
M<-t[1] + if(m1*h>(m2*dd)) m2*dd else m1*h
C<-1
Yt<-c(A,sigmoid(t),K)
t<-c(t[1],t,t[length(t)])
COLS<-vector()
bb<-setNames(t[1]+cumsum(tree$maps[[i]]),names(tree$maps[[i]]))
for(j in 1:length(t))
COLS[j]<-colors[names(bb[which(t[j]<=bb)])[1]]
nn<-length(t)
segments(t[1:(nn-1)],Yt[1:(nn-1)],x1=t[2:nn],y1=Yt[2:nn],
col=COLS,lwd=lwd)
}
nulo<-dev.flush()
}
library(nationalparkcolors)
knitr::opts_chunk$set(echo = TRUE)
library(nlme)
library(rms)
library(nlme)
download.packages("rms")
library(nlme)
download.packages("rms")
library(nlme)
download.packages("rms")
library(nlme)
.libPaths(new = "/home/someuser/R/library")
download.packages("rms")
library(nlme)
apt remove r-base
library(nlme)
download.packages("rms")
knitr::opts_chunk$set(echo = TRUE)
library(nlme)
library(rms)
library(nlme)
download.packages("rms")
library(nlme)
install.packages("rms")
library(rms)
library(phytools)
library(geiger)
knitr::opts_chunk$set(echo = TRUE)
library(nlme)
install.packages("rms")
library(rms)
library(phytools)
install.packages("geiger")
Data <- read.csv("min20516.csv")
library(nlme)
library(rms)
library(phytools)
library(geiger)
library(caper)
library(tidyverse)
library(cowplot)
library(ape)
library(picante)
library(nlme)
library(rms)
library(phytools)
library(geiger)
library(caper)
library(tidyverse)
library(cowplot)
library(ape)
install.packages("picante")
library(picante)
library(ggrepel)
library(ggsci)
setwd("~/")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("cowplot")
# install.packages("lubridate")
library(cowplot)
library(dplyr)
library(ggplot2)
library(lubridate)
df1 <- read.csv("tumorBurden.csv")
setwd("C:\\Users\\hanna\\Desktop\\school\\Honors Thesis"
)
setwd("C:/Users/hanna/Desktop/school/Honors Thesis")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("cowplot")
# install.packages("lubridate")
library(cowplot)
library(dplyr)
library(ggplot2)
library(lubridate)
df1 <- read.csv("tumorBurden.csv")
df1$Date <- as.Date(mdy(df1$Date))
df2 <- read.csv("glucoseLevels.csv")
df2$Date <- as.Date(mdy(df2$Date))
df3 <- read.csv("a1cLevels.csv")
df3$Date <- as.Date(mdy(df3$Date))
# merged_df <- merge(merge(df1, df2, by = "Date", all = TRUE), df3, by = "Date", all = TRUE)
# View(merged_df)
# merged_df$Date <- as.Date(mdy(merged_df$Date))
resectionCavity <- ggplot(data = df1, aes(x = Date, y = Resection)) +
geom_point() +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2022-09-14")), linetype = "dashed", color = "red") +
labs(x = "Date", y = "Resection Cavity Size (cm^3)") +
ggtitle("Resection Cavity Size over Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(as.Date("2022-08-16"), as.Date("2023-12-31"))
glucoseLevelsLong <- ggplot(data = df2, aes(x = Date, y = ReadingGlucose)) +
geom_point() +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2022-09-14")), linetype = "dashed", color = "red") +
labs(x = "Date", y = "Glucose Level(mg/dL)") +
ggtitle("Glucose Levels over Time") +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
xlim(as.Date("2020-10-01"), as.Date("2024-04-01"))
glucoseLevelsShort <- ggplot(data = df2, aes(x = Date, y = ReadingGlucose)) +
geom_point() +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2022-09-14")), linetype = "dashed", color = "red") +
labs(x = "Date", y = "Glucose Level(mg/dL)") +
ggtitle("Glucose Levels over Time") +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
xlim(as.Date("2022-09-01"), as.Date("2024-04-01"))
a1cLevels <- ggplot(data = df3, aes(x = Date, y = A1C)) +
geom_point() +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2022-09-14")), linetype = "dashed", color = "red") +
labs(x = "Date", y = "A1C Levels (%)") +
ggtitle("A1C Levels over Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlim(as.Date("2020-10-01"), as.Date("2024-04-01"))
print(resectionCavity)
print(glucoseLevelsLong)
print(glucoseLevelsShort)
print(a1cLevels)
print(glucoseLevelsShort)
print(a1cLevels)
